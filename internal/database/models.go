// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type PreGoAccUserTwoFactor9999TwoFactorAuthType string

const (
	PreGoAccUserTwoFactor9999TwoFactorAuthTypeSMS   PreGoAccUserTwoFactor9999TwoFactorAuthType = "SMS"
	PreGoAccUserTwoFactor9999TwoFactorAuthTypeEMAIL PreGoAccUserTwoFactor9999TwoFactorAuthType = "EMAIL"
	PreGoAccUserTwoFactor9999TwoFactorAuthTypeAPP   PreGoAccUserTwoFactor9999TwoFactorAuthType = "APP"
)

func (e *PreGoAccUserTwoFactor9999TwoFactorAuthType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreGoAccUserTwoFactor9999TwoFactorAuthType(s)
	case string:
		*e = PreGoAccUserTwoFactor9999TwoFactorAuthType(s)
	default:
		return fmt.Errorf("unsupported scan type for PreGoAccUserTwoFactor9999TwoFactorAuthType: %T", src)
	}
	return nil
}

type NullPreGoAccUserTwoFactor9999TwoFactorAuthType struct {
	PreGoAccUserTwoFactor9999TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
	Valid                                      bool // Valid is true if PreGoAccUserTwoFactor9999TwoFactorAuthType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreGoAccUserTwoFactor9999TwoFactorAuthType) Scan(value interface{}) error {
	if value == nil {
		ns.PreGoAccUserTwoFactor9999TwoFactorAuthType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreGoAccUserTwoFactor9999TwoFactorAuthType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreGoAccUserTwoFactor9999TwoFactorAuthType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreGoAccUserTwoFactor9999TwoFactorAuthType), nil
}

// pre_go_acc_user_base_9999
type PreGoAccUserBase9999 struct {
	// User ID
	UserID int32
	// User account
	UserAccount string
	// User password
	UserPassword string
	// User salt
	UserSalt string
	// User login time
	UserLoginTime sql.NullTime
	// User logout time
	UserLogoutTime sql.NullTime
	// User login IP
	UserLoginIp sql.NullString
	// Record creation time
	UserCreatedAt sql.NullTime
	// Record update time
	UserUpdatedAt sql.NullTime
	// Authentication is enabled for the user
	IsTwoFactorEnabled sql.NullInt32
}

// pre_go_acc_user_info_9999
type PreGoAccUserInfo9999 struct {
	// User ID
	UserID uint64
	// User account
	UserAccount string
	// User nickname
	UserNickname sql.NullString
	// User avatar
	UserAvatar sql.NullString
	// User state: 0: Locked, 1: Activated, 2: Not Activated
	UserState uint8
	// User mobile
	UserMobile sql.NullString
	// User gender: 0-Secret, 1-Male, 2-Female
	UserGender sql.NullInt16
	// User birthday
	UserBirthday sql.NullTime
	// User email
	UserEmail sql.NullString
	// User is authentication: 0: Not authenticated, 1: Pending, 2: Authenticated
	UserIsAuthentication uint8
	// Record creation time
	CreatedAt sql.NullTime
	// Record update time
	UpdatedAt sql.NullTime
}

// pre_go_acc_user_two_factor_9999
type PreGoAccUserTwoFactor9999 struct {
	TwoFactorID         uint32
	UserID              uint32
	TwoFactorAuthType   PreGoAccUserTwoFactor9999TwoFactorAuthType
	TwoFactorAuthSecret string
	TwoFactorPhone      sql.NullString
	TwoFactorEmail      sql.NullString
	TwoFactorIsActive   bool
	// Record creation time
	TwoFactorCreatedAt sql.NullTime
	// Record update time
	TwoFactorUpdatedAt sql.NullTime
}

// pre_go_acc_user_verify_9999
type PreGoAccUserVerify9999 struct {
	// User ID
	VerifyID int32
	// Verify otp
	VerifyOtp string
	// User state: 1: EMAIL, 2: MOBILE
	VerifyType uint8
	// Verify key
	VerifyKey string
	// Verify key hash
	VerifyKeyHash string
	// Is verified: FALSE: Not Verify, TRUE: Verified
	IsVerified bool
	// Is deleted: FALSE: Activing, TRUE: Deleted
	IsDeleted bool
	// Record creation time
	VerifyCreatedAt sql.NullTime
	// Record update time
	VerifyUpdatedAt sql.NullTime
}
